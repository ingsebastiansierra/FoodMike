// PARTE 2: Funciones del Acorde√≥n y Handlers

  // Funciones para manejar el acorde√≥n
  const handleCompleteAddress = () => {
    if (!address.trim()) {
      showAlert('Error', 'Por favor ingresa tu direcci√≥n');
      return;
    }
    if (!phone.trim()) {
      showAlert('Error', 'Por favor ingresa tu tel√©fono');
      return;
    }
    setDeliveryAddress({ street: address, phone, instructions: orderNotes });
    setCompletedSections({ ...completedSections, address: true });
    setExpandedSection('payment');
  };

  const handleCompletePayment = () => {
    if (!paymentMethod) {
      showAlert('Error', 'Por favor selecciona un m√©todo de pago');
      return;
    }
    setCompletedSections({ ...completedSections, payment: true });
    setExpandedSection('confirm');
  };

  const toggleSection = (section) => {
    if (section === 'address' || 
        (section === 'payment' && completedSections.address) ||
        (section === 'confirm' && completedSections.address && completedSections.payment)) {
      setExpandedSection(expandedSection === section ? null : section);
    }
  };

  const handleBack = () => {
    if (navigation.canGoBack()) {
      navigation.goBack();
    } else {
      navigation.reset({
        index: 0,
        routes: [{ name: 'Inicio', params: { screen: 'HomeInitial' } }]
      });
    }
  };

  const handleGetCurrentLocation = async () => {
    try {
      setIsGettingLocation(true);
      const locationData = await locationService.getCompleteLocation();
      setCurrentLocation(locationData);
      if (locationData.address) {
        setAddress(locationData.address.formattedAddress);
      }
      showAlert('üìç Ubicaci√≥n Obtenida', 'Tu ubicaci√≥n actual ha sido detectada.');
    } catch (error) {
      console.error('Error obteniendo ubicaci√≥n:', error);
      Alert.alert('‚ùå Error de Ubicaci√≥n', 'No se pudo obtener tu ubicaci√≥n.');
    } finally {
      setIsGettingLocation(false);
    }
  };

  const handleMapPress = (event) => {
    const { latitude, longitude } = event.nativeEvent.coordinate;
    setSelectedLocation({ latitude, longitude });
    locationService.reverseGeocode(latitude, longitude)
      .then((addressInfo) => {
        if (addressInfo) {
          setAddress(addressInfo.formattedAddress);
          setCurrentLocation({
            coordinates: { latitude, longitude },
            address: addressInfo
          });
        }
      })
      .catch((error) => console.error('Error:', error));
  };

  const handleConfirmLocation = () => {
    if (selectedLocation) {
      setShowMap(false);
      showAlert('‚úÖ Ubicaci√≥n Confirmada', 'La ubicaci√≥n ha sido seleccionada.');
    }
  };

  const handlePlaceOrder = async () => {
    Alert.alert(
      'üéâ Confirmar Pedido',
      `¬øConfirmas tu pedido por ${formatCurrency(finalTotal)}?`,
      [
        { text: 'Cancelar', style: 'cancel' },
        { text: '‚úÖ Confirmar', onPress: processOrder }
      ]
    );
  };

  const processOrder = async () => {
    setIsProcessing(true);
    try {
      if (paymentMethod === 'wompi') {
        await handleWompiPayment();
        return;
      }

      const result = await createOrder();
      let message = 'Tu pedido ha sido enviado. Te notificaremos cuando est√© listo.';
      if (paymentMethod === 'transfer') {
        message = 'Recibir√°s los datos bancarios por correo para completar el pago.';
      }

      Alert.alert('üéâ ¬°Pedido Confirmado!', message, [
        {
          text: 'üìã Ver Pedido',
          onPress: () => {
            navigation.reset({
              index: 1,
              routes: [
                { name: 'Inicio', params: { screen: 'HomeInitial' } },
                { name: 'OrderDetail', params: { orderId: result.data.id } }
              ]
            });
          }
        },
        {
          text: 'üè† Ir a Inicio',
          onPress: () => {
            navigation.reset({
              index: 0,
              routes: [{ name: 'Inicio', params: { screen: 'HomeInitial' } }]
            });
          }
        }
      ]);
    } catch (error) {
      showAlert('‚ùå Error', 'No se pudo procesar tu pedido.');
    } finally {
      setIsProcessing(false);
    }
  };

  const handleWompiPayment = async () => {
    try {
      const reference = wompiService.generateReference();
      const orderData = {
        amount: finalTotal,
        reference: reference,
        email: user.email,
        name: user.user_metadata?.full_name || user.email,
        phone: phone,
        redirectUrl: 'https://tuapp.com/payment-success'
      };

      showAlert('üí≥ Redirigiendo a Wompi', 'Ser√°s redirigido al checkout seguro.', [
        {
          text: 'Continuar',
          onPress: async () => {
            try {
              await wompiService.openCheckout(orderData);
              showAlert('‚ÑπÔ∏è Pago en proceso', 'Una vez completes el pago, tu pedido ser√° confirmado.');
            } catch (error) {
              showAlert('‚ùå Error', 'No se pudo abrir el checkout de Wompi.');
            }
          }
        },
        { text: 'Cancelar', style: 'cancel' }
      ]);
    } catch (error) {
      showAlert('‚ùå Error', 'Hubo un problema al procesar el pago.');
    }
  };
